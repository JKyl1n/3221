#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <time.h>
#include <errno.h>
#include <ctype.h>
#include <unistd.h>

#define err_abort(code, text) do { \
    fprintf(stderr, "%s at \"%s\":%d: %s\n", text, __FILE__, __LINE__, strerror(code)); \
    exit(EXIT_FAILURE); \
} while (0)

#define errno_abort(text) do { \
    perror(text); \
    exit(EXIT_FAILURE); \
} while (0)

typedef struct alarm_tag {
    struct alarm_tag *link;
    int Alarm_ID;
    char Type[10];
    int seconds;
    time_t time;        /* seconds from EPOCH for alarm expiration */
    time_t Time_Stamp;  /* request insertion time */
    int request_type;   /* 0: start; 1: change; 2: cancel; 3: suspend; 4: reactivate; 5: view */
    char message[128];
    int alarm_status;   /* 0: active; 1: suspended (for example) */
    pthread_t display_thread_id;
} alarm_t;

pthread_mutex_t alarm_mutex = PTHREAD_MUTEX_INITIALIZER;
alarm_t *alarm_list = NULL;

/* Thread function prototypes */
void *start_thread(void *arg);
void *manage_thread(void *arg);
void *view_thread(void *arg);

/* (Optional) Print the current alarm list - could be used by view_thread */
void print_alarm_list() {
    int status = pthread_mutex_lock(&alarm_mutex);
    if (status != 0) err_abort(status, "Lock mutex");
    alarm_t *curr = alarm_list;
    printf("Current Alarm List:\n");
    while (curr != NULL) {
        printf("Alarm ID %d, Type %d, TimeStamp %ld, Time %d, Message: %s\n",
               curr->Alarm_ID, curr->request_type, curr->Time_Stamp, curr->seconds, curr->message);
        curr = curr->link;
    }
    status = pthread_mutex_unlock(&alarm_mutex);
    if (status != 0) err_abort(status, "Unlock mutex");
}

int main(int argc, char *argv[]) {
    int status;
    char line[256];
    pthread_t start_tid, manage_tid, view_tid;

    /* Create required threads */
    status = pthread_create(&start_tid, NULL, start_thread, NULL);
    if (status != 0) err_abort(status, "Create start alarm thread");
    status = pthread_create(&manage_tid, NULL, manage_thread, NULL);
    if (status != 0) err_abort(status, "Create manage alarm thread");
    status = pthread_create(&view_tid, NULL, view_thread, NULL);
    if (status != 0) err_abort(status, "Create view alarm thread");

    /* Main loop to get user input */
    while (1) {
        printf("Alarm> ");
        fflush(stdout);
        if (fgets(line, sizeof(line), stdin) == NULL) {
            break;  /* EOF encountered, exit loop */
        }
        if (strlen(line) <= 1) {
            continue;  /* empty line entered */
        }
        /* Remove trailing newline */
        size_t len = strlen(line);
        if (line[len-1] == '\n') {
            line[len-1] = '\0';
            len--;
        }
        /* Trim leading and trailing whitespace */
        char *input = line;
        while (*input != '\0' && isspace((unsigned char)*input)) {
            input++;
        }
        if (*input == '\0') {
            continue;  /* line was all whitespace */
        }
        char *end = input + strlen(input) - 1;
        while (end > input && isspace((unsigned char)*end)) {
            *end = '\0';
            end--;
        }

        alarm_t *alarm = NULL;
        time_t current_time;

        if (strncmp(input, "Start_Alarm", 11) == 0) {
            int alarm_id, sec;
            char temp_msg[256];
            int num_fields = sscanf(input, "Start_Alarm(%d): %d %128[^\n]", &alarm_id, &sec, temp_msg);
            if (num_fields < 3) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            temp_msg[127] = '\0';  /* ensure message is null-terminated at 128 chars */

            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = alarm_id;
            strncpy(alarm->message, temp_msg, 128);
            alarm->message[127] = '\0';
            alarm->seconds = sec;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time + sec;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 0;  /* start */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("Start_Alarm(%d) Request Inserted Into Alarm List: %ld %d %s\n",
                   alarm_id, alarm->Time_Stamp, alarm->seconds, alarm->message);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else if (strncmp(input, "Change_Alarm", 12) == 0) {
            int alarm_id, sec;
            char temp_msg[256];
            int num_fields = sscanf(input, "Change_Alarm(%d): %d %128[^\n]", &alarm_id, &sec, temp_msg);
            if (num_fields < 3) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            temp_msg[127] = '\0';

            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = alarm_id;
            strncpy(alarm->message, temp_msg, 128);
            alarm->message[127] = '\0';
            alarm->seconds = sec;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time + sec;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 1;  /* change */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            /* remove existing start/change for same Alarm_ID if present */
            while (next != NULL) {
                if (next->Alarm_ID == alarm_id && (next->request_type == 0 || next->request_type == 1)) {
                    *last = next->link;
                    free(next);
                    break;
                }
                last = &next->link;
                next = next->link;
            }
            /* find end of list to insert */
            last = &alarm_list;
            next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("Change_Alarm(%d) Request Inserted Into Alarm List: %ld %d %s\n",
                   alarm_id, alarm->Time_Stamp, alarm->seconds, alarm->message);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else if (strncmp(input, "Cancel_Alarm", 12) == 0) {
            int alarm_id;
            int num_fields = sscanf(input, "Cancel_Alarm(%d)", &alarm_id);
            if (num_fields < 1) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            /* ensure no extra characters after ) */
            char *rparen = strrchr(input, ')');
            if (rparen == NULL || *(rparen+1) != '\0') {
                fprintf(stderr, "Bad command\n");
                continue;
            }

            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = alarm_id;
            alarm->message[0] = '\0';
            alarm->seconds = 0;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 2;  /* cancel */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("Cancel_Alarm(%d) Request Inserted Into Alarm List: %ld\n",
                   alarm_id, alarm->Time_Stamp);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else if (strncmp(input, "Suspend_Alarm", 13) == 0) {
            int alarm_id;
            int num_fields = sscanf(input, "Suspend_Alarm(%d)", &alarm_id);
            if (num_fields < 1) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            char *rparen = strrchr(input, ')');
            if (rparen == NULL || *(rparen+1) != '\0') {
                fprintf(stderr, "Bad command\n");
                continue;
            }

            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = alarm_id;
            alarm->message[0] = '\0';
            alarm->seconds = 0;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 3;  /* suspend */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("Suspend_Alarm(%d) Request Inserted Into Alarm List: %ld\n",
                   alarm_id, alarm->Time_Stamp);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else if (strncmp(input, "Reactivate_Alarm", 16) == 0) {
            int alarm_id;
            int num_fields = sscanf(input, "Reactivate_Alarm(%d)", &alarm_id);
            if (num_fields < 1) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            char *rparen = strrchr(input, ')');
            if (rparen == NULL || *(rparen+1) != '\0') {
                fprintf(stderr, "Bad command\n");
                continue;
            }

            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = alarm_id;
            alarm->message[0] = '\0';
            alarm->seconds = 0;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 4;  /* reactivate */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("Reactivate_Alarm(%d) Request Inserted Into Alarm List: %ld\n",
                   alarm_id, alarm->Time_Stamp);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else if (strncmp(input, "View_Alarms", 11) == 0) {
            if (strcmp(input, "View_Alarms") != 0) {
                fprintf(stderr, "Bad command\n");
                continue;
            }
            alarm = (alarm_t *)malloc(sizeof(alarm_t));
            if (alarm == NULL) errno_abort("Allocate alarm");
            alarm->Alarm_ID = 0;
            alarm->message[0] = '\0';
            alarm->seconds = 0;
            current_time = time(NULL);
            alarm->Time_Stamp = current_time;
            alarm->time = current_time;
            alarm->alarm_status = 0;
            alarm->display_thread_id = 0;
            alarm->request_type = 5;  /* view */

            status = pthread_mutex_lock(&alarm_mutex);
            if (status != 0) err_abort(status, "Lock mutex");
            alarm_t **last = &alarm_list;
            alarm_t *next = *last;
            while (next != NULL) {
                last = &next->link;
                next = next->link;
            }
            alarm->link = NULL;
            *last = alarm;
            printf("View_Alarms Request Inserted Into Alarm List: %ld\n", alarm->Time_Stamp);
            fflush(stdout);
            status = pthread_mutex_unlock(&alarm_mutex);
            if (status != 0) err_abort(status, "Unlock mutex");
        }
        else {
            fprintf(stderr, "Bad command\n");
            continue;
        }
    }

    /* Join threads (not reached in typical execution unless input ends) */
    pthread_cancel(start_tid);   /* optional: cancel threads if still running */
    pthread_cancel(manage_tid);
    pthread_cancel(view_tid);
    pthread_join(start_tid, NULL);
    pthread_join(manage_tid, NULL);
    pthread_join(view_tid, NULL);
    return 0;
}

void *start_thread(void *arg) {
    /* Start Alarm thread logic would go here */
    while (1) {
        sleep(1);
    }
    return NULL;
}

void *manage_thread(void *arg) {
    /* Manage Alarm thread logic would go here */
    while (1) {
        sleep(1);
    }
    return NULL;
}

void *view_thread(void *arg) {
    /* View Alarms thread logic would go here */
    while (1) {
        sleep(1);
    }
    return NULL;
}
