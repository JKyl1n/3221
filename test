int main (int argc, char *argv[]) {
    int status;
    char line[128];
    alarm_t *alarm, **last, *next;
    pthread_t alarm_thread_handle, start_thread, manage_thread;

    status = pthread_create(&start_thread, NULL, start_alarm_thread, NULL);
    if (status != 0)
        err_abort(status, "Create start alarm thread");

    status = pthread_create(&alarm_thread_handle, NULL, alarm_thread, NULL);
    if (status != 0)
        err_abort(status, "Create alarm thread");

    status = pthread_create(&manage_thread, NULL, manage_alarm_thread, NULL);
    if (status != 0)
        err_abort(status, "Create manage alarm thread");

    while (1) {
        printf("alarm> ");
        if (fgets(line, sizeof(line), stdin) == NULL) exit(0);
        if (strlen(line) <= 1) continue;

        alarm = (alarm_t*)malloc(sizeof(alarm_t));
        if (alarm == NULL)
            errno_abort("Allocate alarm");
       /*
          * Parse input line into seconds (%d) and a message
          * (%64[^\n]), consisting of up to 64 characters
          * separated from the seconds by whitespace.
          */
 
        if (sscanf(line, "Start_Alarm(%d): %d %[^\n]",  //Checks for the user imput and depending on what function has been requested, it makes the call for its function
            &alarm->alarm_id, &alarm->seconds, alarm->message) == 3) {
            alarm->func = ALARM_START;
            alarm->request_time = time(NULL);
            alarm->status = 1; // Mark as active
            printf("Start_Alarm(%d) Request Inserted Into Alarm List: %ld %d %s\n",
                   alarm->alarm_id, alarm->request_time, alarm->seconds, alarm->message);
        } 
        else if (sscanf(line, "Change_Alarm(%d): %d %[^\n]", 
                 &alarm->alarm_id, &alarm->seconds, alarm->message) == 3) {
            alarm->func = ALARM_CHANGE;
            alarm->request_time = time(NULL);
        } 
        else if (sscanf(line, "Cancel_Alarm(%d)", &alarm->alarm_id) == 1) {
            alarm->func = ALARM_CANCEL;
            alarm->request_time = time(NULL);
        } 
        else if (sscanf(line, "Suspend_Alarm(%d)", &alarm->alarm_id) == 1) {
            alarm->func = ALARM_SUSPEND;
            alarm->request_time = time(NULL);
        } 
        else if (sscanf(line, "Reactivate_Alarm(%d)", &alarm->alarm_id) == 1) {
            alarm->func = ALARM_REACTIVATE;
            alarm->request_time = time(NULL);
        } 
        else {
            fprintf(stderr, "Bad command\n");
            free(alarm);
            continue;
        }


        alarm->time = time(NULL) + alarm->seconds;

        status = pthread_mutex_lock(&alarm_mutex);
        if (status != 0)
            err_abort(status, "Lock mutex");
        alarm->time = time (NULL) + alarm->seconds;
        /*
              * Insert the new alarm into the list of alarms,
              * sorted by expiration time.
              */
        last = &alarm_list;
        next = *last;

        while (next != NULL) {
            if (next->time >= alarm->time) {
                alarm->link = next;
                *last = alarm;
                break;
            }
            last = &next->link;
            next = next->link;
        }
        /*
              * If we reached the end of the list, insert the new
              * alarm there. ("next" is NULL, and "last" points
              * to the link field of the last item, or to the
              * list header).
              */

        #ifdef DEBUG
             printf ("[list: ");
             for (next = alarm_list; next != NULL; next = next->link)
                 printf ("%d(%d)[\"%s\"] ", next->time,
                     next->time - time (NULL), next->message);
             printf ("]\n");
 #endif
             status = pthread_mutex_unlock (&alarm_mutex);
             if (status != 0)
                 err_abort (status, "Unlock mutex");
    }
}
